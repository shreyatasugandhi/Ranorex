///////////////////////////////////////////////////////////////////////////////
//
// This file was automatically generated by RANOREX.
// DO NOT MODIFY THIS FILE! It is regenerated by the designer.
// All your modifications will be lost!
// http://www.ranorex.com
//
///////////////////////////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.Text.RegularExpressions;
using System.Drawing;
using System.Threading;
using WinForms = System.Windows.Forms;

using Ranorex;
using Ranorex.Core;
using Ranorex.Core.Testing;
using Ranorex.Core.Repository;

namespace TestApp
{
#pragma warning disable 0436 //(CS0436) The type 'type' in 'assembly' conflicts with the imported type 'type2' in 'assembly'. Using the type defined in 'assembly'.
    /// <summary>
    ///The Recording2 recording.
    /// </summary>
    [TestModule("7e42b61d-3857-48e9-b0dd-fedbb9605b63", ModuleType.Recording, 1)]
    public partial class Recording2 : ITestModule
    {
        /// <summary>
        /// Holds an instance of the TestAppRepository repository.
        /// </summary>
        public static TestAppRepository repo = TestAppRepository.Instance;

        static Recording2 instance = new Recording2();

        /// <summary>
        /// Constructs a new instance.
        /// </summary>
        public Recording2()
        {
        }

        /// <summary>
        /// Gets a static instance of this recording.
        /// </summary>
        public static Recording2 Instance
        {
            get { return instance; }
        }

#region Variables

#endregion

        /// <summary>
        /// Starts the replay of the static recording <see cref="Instance"/>.
        /// </summary>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        public static void Start()
        {
            TestModuleRunner.Run(Instance);
        }

        /// <summary>
        /// Performs the playback of actions in this recording.
        /// </summary>
        /// <remarks>You should not call this method directly, instead pass the module
        /// instance to the <see cref="TestModuleRunner.Run(ITestModule)"/> method
        /// that will in turn invoke this method.</remarks>
        [System.CodeDom.Compiler.GeneratedCode("Ranorex", "8.3")]
        void ITestModule.Run()
        {
            Mouse.DefaultMoveTime = 300;
            Keyboard.DefaultKeyPressTime = 100;
            Delay.SpeedFactor = 1.00;

            Init();

            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.ImageBasedAutomation' at 30;11.", repo.ApplicationUnderTest.ImageBasedAutomationInfo, new RecordItemIndex(0));
            repo.ApplicationUnderTest.ImageBasedAutomation.Click(new Location(ImageBasedAutomation_Screenshot1, "30;11", ImageBasedAutomation_Screenshot1_Options));
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.RxTabImageBased.ChkShowImage' at 3;4.", repo.ApplicationUnderTest.RxTabImageBased.ChkShowImageInfo, new RecordItemIndex(1));
            repo.ApplicationUnderTest.RxTabImageBased.ChkShowImage.Click(new Location(ChkShowImage_Screenshot1, "3;4", ChkShowImage_Screenshot1_Options));
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating CompareImage (Screenshot: 'Screenshot1' with region {X=0,Y=0,Width=402,Height=263}) on item 'ApplicationUnderTest.RxTabImageBased.TheCat'.", repo.ApplicationUnderTest.RxTabImageBased.TheCatInfo, new RecordItemIndex(2));
            Validate.CompareImage(repo.ApplicationUnderTest.RxTabImageBased.TheCatInfo, TheCat_Screenshot1, TheCat_Screenshot1_Options);
            Delay.Milliseconds(100);
            
            Report.Log(ReportLevel.Info, "Mouse", "Mouse Left Click item 'ApplicationUnderTest.RxTabImageBased.ChkShowImage' at 8;9.", repo.ApplicationUnderTest.RxTabImageBased.ChkShowImageInfo, new RecordItemIndex(3));
            repo.ApplicationUnderTest.RxTabImageBased.ChkShowImage.Click("8;9");
            Delay.Milliseconds(200);
            
            Report.Log(ReportLevel.Info, "Validation", "Validating CompareImage (Screenshot: 'Screenshot2' with region {X=0,Y=0,Width=790,Height=361}) on item 'ApplicationUnderTest.RxTabImageBased.RxTabImageBased'.", repo.ApplicationUnderTest.RxTabImageBased.RxTabImageBasedInfo, new RecordItemIndex(4));
            Validate.CompareImage(repo.ApplicationUnderTest.RxTabImageBased.RxTabImageBasedInfo, RxTabImageBased_Screenshot2, RxTabImageBased_Screenshot2_Options);
            Delay.Milliseconds(100);
            
        }

#region Image Feature Data
        CompressedImage ImageBasedAutomation_Screenshot1
        { get { return repo.ApplicationUnderTest.ImageBasedAutomationInfo.GetScreenshot1(new Rectangle(40, 5, 36, 15)); } }

        Imaging.FindOptions ImageBasedAutomation_Screenshot1_Options
        { get { return Imaging.FindOptions.Default; } }

        CompressedImage ChkShowImage_Screenshot1
        { get { return repo.ApplicationUnderTest.RxTabImageBased.ChkShowImageInfo.GetScreenshot1(new Rectangle(0, 6, 8, 8)); } }

        Imaging.FindOptions ChkShowImage_Screenshot1_Options
        { get { return Imaging.FindOptions.Parse("0.95;None;0,0,0,0;True;10000000;0ms"); } }

        CompressedImage TheCat_Screenshot1
        { get { return repo.ApplicationUnderTest.RxTabImageBased.TheCatInfo.GetScreenshot1(new Rectangle(0, 0, 402, 263)); } }

        Imaging.FindOptions TheCat_Screenshot1_Options
        { get { return Imaging.FindOptions.Parse("1;None;0,0,402,263;True;10000000;0ms"); } }

        CompressedImage RxTabImageBased_Screenshot2
        { get { return repo.ApplicationUnderTest.RxTabImageBased.RxTabImageBasedInfo.GetScreenshot2(new Rectangle(0, 0, 790, 361)); } }

        Imaging.FindOptions RxTabImageBased_Screenshot2_Options
        { get { return Imaging.FindOptions.Parse("0.9;27;0,0,790,361;True;10000000;0ms"); } }

#endregion
    }
#pragma warning restore 0436
}
